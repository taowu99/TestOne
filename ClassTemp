public class ClassTemp {
  //this is not a backtrack. but a permutation.  The sequence of 1st and 2nd numbers decides the how the list should be.  no repeat or reuse.
  //for each combinine 1st and 2nd, calculate the next number and check if it is the beginning of next section of S.  Repeat until the end of S
  //1. 0 is a legal number while 01 is not
  //2. compare to max int
  //3. reset list to origin, [first #], after each fail.  at some cases, f1 has been replaced.  So f1 is not good to use
  
  public List<Integer> splitIntoFibonacci(String S) {
        List<Integer> res = new ArrayList();
        if (S.length()<3)
            return res;

        for (int i = 0; i < S.length() / 2; ++i) {
            final String f1s = S.substring(0, i + 1);
            if (!isGoodInteger(f1s))
                break;
            int f1 = Integer.parseInt(f1s);
            res.add(f1);
            for (int k = i + 1; k < S.length() && (S.length()-k) >= Math.max(i,k-i); ++k) {
                int r = k+1;
                final String f2s = S.substring(i + 1, r);
                if (!isGoodInteger(f2s))
                    break;
                int f2 = Integer.parseInt(f2s);
                res.add(f2);
                while (r < S.length()) {
                    final int f3 = f1 + f2;
                    final String f3s = Integer.toString(f3);
                    if (S.substring(r).startsWith(f3s)) {
                        res.add(f3);
                        f1 = f2;
                        f2 = f3;
                        r += f3s.length();
                    } else
                        break;
                }
                if (r == S.length())
                    return res;
                else {
                    res.clear();
                    f1 = Integer.parseInt(f1s);
                    res.add(f1);
                }
            }
            res.clear();
        }
        return res;
    }

    private boolean isGoodInteger(String s) {
        try {
            if (s.charAt(0)=='0' && s.length()!=1)
                return false;
            final String maxIntString = Integer.toString(Integer.MAX_VALUE);
            return s.length() < maxIntString.length() || s.length() == maxIntString.length() && s.compareTo(maxIntString)<=0;
        }catch (Exception e) {
            return false;
        }
    }
}
